<!-- Carlos N Reina
    cnreina@gmail.com

    Rest Client: Generate Code Snippet > select language and library. 

    SSL Client Certificates:
        Supports PFX, PKCS12, and PEM certificates.
        Must set paths in settings file for expected each host name.
        cert: Path of public x509 certificate
        key: Path of private key
        pfx: Path of PKCS #12 or PFX certificate
        passphrase: Optional passphrase for the certificate if required.

    Setting for certificates in PEM format:
    "rest-client.certificates": {
        "localhost:8081": {
            "cert": "/Users/demo/Certificates/client.crt",
            "key": "/Users/demo/Keys/client.key"
        },
        "example.com": {
            "cert": "/Users/demo/Certificates/client.crt",
            "key": "/Users/demo/Keys/client.key"
        }
    }

    Setting for certificates in PFX or PKCS12 format:
    "rest-client.certificates": {
        "localhost:8081": {
            "pfx": "/Users/demo/Certificates/clientcert.p12",
            "passphrase": "123456"
        }
    }

-->

### GET
GET https://example.com/comments/1 HTTP/1.1

### GET Query Strings
GET https://api.example.com/login?name=foo&password=bar

### GET Query Strings
GET https://example.com/comments
    ?page=2
    &pageSize=10

### POST application/xml
POST https://example.com/comments HTTP/1.1
Content-Type: application/xml
Authorization: token xxx

<request>
    <name>sample</name>
    <time>Wed, 21 Oct 2015 18:27:50 GMT</time>
</request>

### POST application/xml from absolute path to file
POST https://example.com/comments HTTP/1.1
Content-Type: application/xml
Authorization: token xxx

< /path/to/file.xml

### POST application/xml from relative path to file
POST https://example.com/comments HTTP/1.1
Content-Type: application/xml
Authorization: token xxx

< ./file.xml

### POST multipart/form-data
POST https://api.example.com/user/upload
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="text"

title
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="1.png"
Content-Type: image/png

< ./1.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### POST application/x-www-form-urlencoded
POST https://api.example.com/login HTTP/1.1
Content-Type: application/x-www-form-urlencoded

?name=foo
&password=bar


### POST GraphQL Request
POST https://api.github.com/graphql
Content-Type: application/json
Authorization: Bearer xxx
X-REQUEST-TYPE: GraphQL

query ($name: String!, $owner: String!) {
  repository(name: $name, owner: $owner) {
    name
    fullName: nameWithOwner
    description
    diskUsage
    forkCount
    stargazers(first: 5) {
        totalCount
        nodes {
            login
            name
        }
    }
    watchers {
        totalCount
    }
  }
}

{
    "name": "vscode-restclient",
    "owner": "cnreina"
}

### GET Basic Auth raw username:password
GET https://httpbin.org/basic-auth/user/passwd HTTP/1.1
Authorization: Basic user:passwd

### GET Basic Auth base64 encoding of username:password
GET https://httpbin.org/basic-auth/user/passwd HTTP/1.1
Authorization: Basic dXNlcjpwYXNzd2Q=

### GET Basic Auth raw username and password separated by space
### REST Client will do the base64 encoding automatically
GET https://httpbin.org/basic-auth/user/passwd HTTP/1.1
Authorization: Basic user passwd

### GET Digest Auth raw user name and password
GET https://httpbin.org/digest-auth/auth/user/passwd
Authorization: Digest user passwd

### POST Environment Variables
POST https://{{DOMAIN}}/oauth2/token HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Authorization: Basic {{CLIENT_ID}} {{CLIENT_SECRET}}

?grant_type=refresh_token
&client_id={{CLIENT_ID}}
&refresh_token={{REFRESH_TOKEN}}
&redirect_uri={{REDIRECT_URI}}

### POST Environment Variables Access Token
GET https://mxapi.test.tools.mtc.byu.edu/missions/missionaries/nonjuniors
authorization: Bearer {{ACCESS_TOKEN}}
accept: 'application/json'
